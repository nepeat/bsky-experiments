// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: get_blocks_for_target.sql

package search_queries

import (
	"context"
)

const getBlocksForTarget = `-- name: GetBlocksForTarget :many
SELECT actor_did, target_did, created_at
FROM author_blocks
WHERE target_did = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetBlocksForTargetParams struct {
	TargetDid string `json:"target_did"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

// GetBlocksForTarget returns a page of blocks for a given target DID.
// The blocks are ordered by the created_at timestamp ascending.
func (q *Queries) GetBlocksForTarget(ctx context.Context, arg GetBlocksForTargetParams) ([]AuthorBlock, error) {
	rows, err := q.query(ctx, q.getBlocksForTargetStmt, getBlocksForTarget, arg.TargetDid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthorBlock
	for rows.Next() {
		var i AuthorBlock
		if err := rows.Scan(&i.ActorDid, &i.TargetDid, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
