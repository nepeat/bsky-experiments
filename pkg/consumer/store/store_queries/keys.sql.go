// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: keys.sql

package store_queries

import (
	"context"
	"encoding/json"
)

const createKey = `-- name: CreateKey :exec
INSERT INTO api_keys(api_key, auth_entity, assigned_user)
VALUES ($1, $2, $3)
`

type CreateKeyParams struct {
	ApiKey       string          `json:"api_key"`
	AuthEntity   json.RawMessage `json:"auth_entity"`
	AssignedUser string          `json:"assigned_user"`
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) error {
	_, err := q.exec(ctx, q.createKeyStmt, createKey, arg.ApiKey, arg.AuthEntity, arg.AssignedUser)
	return err
}

const deleteKey = `-- name: DeleteKey :exec
DELETE FROM api_keys
WHERE api_key = $1
`

func (q *Queries) DeleteKey(ctx context.Context, apiKey string) error {
	_, err := q.exec(ctx, q.deleteKeyStmt, deleteKey, apiKey)
	return err
}

const getKey = `-- name: GetKey :one
SELECT api_key, auth_entity, assigned_user, created_at, updated_at
FROM api_keys
WHERE api_key = $1
`

func (q *Queries) GetKey(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.queryRow(ctx, q.getKeyStmt, getKey, apiKey)
	var i ApiKey
	err := row.Scan(
		&i.ApiKey,
		&i.AuthEntity,
		&i.AssignedUser,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
