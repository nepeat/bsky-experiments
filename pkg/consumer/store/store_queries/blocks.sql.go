// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: blocks.sql

package store_queries

import (
	"context"
	"database/sql"
)

const countBlockersByTarget = `-- name: CountBlockersByTarget :one
SELECT COUNT(*)
FROM blocks
WHERE target_did = $1
`

func (q *Queries) CountBlockersByTarget(ctx context.Context, targetDid string) (int64, error) {
	row := q.queryRow(ctx, q.countBlockersByTargetStmt, countBlockersByTarget, targetDid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countBlocksByActor = `-- name: CountBlocksByActor :one
SELECT COUNT(*)
FROM blocks
WHERE actor_did = $1
`

func (q *Queries) CountBlocksByActor(ctx context.Context, actorDid string) (int64, error) {
	row := q.queryRow(ctx, q.countBlocksByActorStmt, countBlocksByActor, actorDid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBlock = `-- name: CreateBlock :exec
INSERT INTO blocks(
        actor_did,
        rkey,
        target_did,
        created_at
    )
VALUES ($1, $2, $3, $4)
`

type CreateBlockParams struct {
	ActorDid  string       `json:"actor_did"`
	Rkey      string       `json:"rkey"`
	TargetDid string       `json:"target_did"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.exec(ctx, q.createBlockStmt, createBlock,
		arg.ActorDid,
		arg.Rkey,
		arg.TargetDid,
		arg.CreatedAt,
	)
	return err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks
WHERE actor_did = $1
    AND rkey = $2
`

type DeleteBlockParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeleteBlock(ctx context.Context, arg DeleteBlockParams) error {
	_, err := q.exec(ctx, q.deleteBlockStmt, deleteBlock, arg.ActorDid, arg.Rkey)
	return err
}

const getBlock = `-- name: GetBlock :one
SELECT actor_did, rkey, target_did, created_at, inserted_at
FROM blocks
WHERE actor_did = $1
    AND rkey = $2
`

type GetBlockParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) GetBlock(ctx context.Context, arg GetBlockParams) (Block, error) {
	row := q.queryRow(ctx, q.getBlockStmt, getBlock, arg.ActorDid, arg.Rkey)
	var i Block
	err := row.Scan(
		&i.ActorDid,
		&i.Rkey,
		&i.TargetDid,
		&i.CreatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getBlocksByActor = `-- name: GetBlocksByActor :many
SELECT actor_did, rkey, target_did, created_at, inserted_at
FROM blocks
WHERE actor_did = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetBlocksByActorParams struct {
	ActorDid string `json:"actor_did"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetBlocksByActor(ctx context.Context, arg GetBlocksByActorParams) ([]Block, error) {
	rows, err := q.query(ctx, q.getBlocksByActorStmt, getBlocksByActor, arg.ActorDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.TargetDid,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlocksByActorAndTarget = `-- name: GetBlocksByActorAndTarget :many
SELECT actor_did, rkey, target_did, created_at, inserted_at
FROM blocks
WHERE actor_did = $1
    AND target_did = $2
ORDER BY created_at DESC
LIMIT $3
`

type GetBlocksByActorAndTargetParams struct {
	ActorDid  string `json:"actor_did"`
	TargetDid string `json:"target_did"`
	Limit     int32  `json:"limit"`
}

func (q *Queries) GetBlocksByActorAndTarget(ctx context.Context, arg GetBlocksByActorAndTargetParams) ([]Block, error) {
	rows, err := q.query(ctx, q.getBlocksByActorAndTargetStmt, getBlocksByActorAndTarget, arg.ActorDid, arg.TargetDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.TargetDid,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlocksByTarget = `-- name: GetBlocksByTarget :many
SELECT actor_did, rkey, target_did, created_at, inserted_at
FROM blocks
WHERE target_did = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetBlocksByTargetParams struct {
	TargetDid string `json:"target_did"`
	Limit     int32  `json:"limit"`
}

func (q *Queries) GetBlocksByTarget(ctx context.Context, arg GetBlocksByTargetParams) ([]Block, error) {
	rows, err := q.query(ctx, q.getBlocksByTargetStmt, getBlocksByTarget, arg.TargetDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Block
	for rows.Next() {
		var i Block
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.TargetDid,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
