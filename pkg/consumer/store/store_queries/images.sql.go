// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: images.sql

package store_queries

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO images (
        cid,
        post_actor_did,
        post_rkey,
        alt_text,
        created_at
    )
VALUES ($1, $2, $3, $4, $5)
`

type CreateImageParams struct {
	Cid          string         `json:"cid"`
	PostActorDid string         `json:"post_actor_did"`
	PostRkey     string         `json:"post_rkey"`
	AltText      sql.NullString `json:"alt_text"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.exec(ctx, q.createImageStmt, createImage,
		arg.Cid,
		arg.PostActorDid,
		arg.PostRkey,
		arg.AltText,
		arg.CreatedAt,
	)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE post_actor_did = $1
    AND post_rkey = $2
    AND cid = $3
`

type DeleteImageParams struct {
	PostActorDid string `json:"post_actor_did"`
	PostRkey     string `json:"post_rkey"`
	Cid          string `json:"cid"`
}

func (q *Queries) DeleteImage(ctx context.Context, arg DeleteImageParams) error {
	_, err := q.exec(ctx, q.deleteImageStmt, deleteImage, arg.PostActorDid, arg.PostRkey, arg.Cid)
	return err
}

const deleteImagesForPost = `-- name: DeleteImagesForPost :exec
DELETE FROM images
WHERE post_actor_did = $1
    AND post_rkey = $2
`

type DeleteImagesForPostParams struct {
	PostActorDid string `json:"post_actor_did"`
	PostRkey     string `json:"post_rkey"`
}

func (q *Queries) DeleteImagesForPost(ctx context.Context, arg DeleteImagesForPostParams) error {
	_, err := q.exec(ctx, q.deleteImagesForPostStmt, deleteImagesForPost, arg.PostActorDid, arg.PostRkey)
	return err
}

const getImage = `-- name: GetImage :one
SELECT cid, post_actor_did, post_rkey, alt_text, created_at, inserted_at
FROM images
WHERE post_actor_did = $1
    AND post_rkey = $2
    AND cid = $3
`

type GetImageParams struct {
	PostActorDid string `json:"post_actor_did"`
	PostRkey     string `json:"post_rkey"`
	Cid          string `json:"cid"`
}

func (q *Queries) GetImage(ctx context.Context, arg GetImageParams) (Image, error) {
	row := q.queryRow(ctx, q.getImageStmt, getImage, arg.PostActorDid, arg.PostRkey, arg.Cid)
	var i Image
	err := row.Scan(
		&i.Cid,
		&i.PostActorDid,
		&i.PostRkey,
		&i.AltText,
		&i.CreatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getImagesForPost = `-- name: GetImagesForPost :many
SELECT cid, post_actor_did, post_rkey, alt_text, created_at, inserted_at
FROM images
WHERE post_actor_did = $1
    AND post_rkey = $2
ORDER BY created_at DESC
LIMIT $3
`

type GetImagesForPostParams struct {
	PostActorDid string `json:"post_actor_did"`
	PostRkey     string `json:"post_rkey"`
	Limit        int32  `json:"limit"`
}

func (q *Queries) GetImagesForPost(ctx context.Context, arg GetImagesForPostParams) ([]Image, error) {
	rows, err := q.query(ctx, q.getImagesForPostStmt, getImagesForPost, arg.PostActorDid, arg.PostRkey, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.Cid,
			&i.PostActorDid,
			&i.PostRkey,
			&i.AltText,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
